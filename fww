#!/bin/sh
set -e
# this script may run on Windows in the Cosmopolitan shell, but this is **untested**
if [ "$#" = "0" ]; then
	CMD="help"
else
	CMD="$1"
	shift
fi

. ./setup.sh

KERNEL_FN=funcWebWiki.com

fused_clean() {
	set -e
	rm -f funcWebWiki-rx.com
	rm -f release.zip
}

kernel_clean() {
	set -e
	rm -f "$KERNEL_FN" funcWebWiki-rx-kernel.com
	fused_clean
}

kernel_build() {
	set -e
	kernel_clean
	# make kernel build
	cp thirdparty/redbean-3.0.0.com "$KERNEL_FN"
	# redbean-3.0.0 doesn't support -*
	cp thirdparty/redbean-2.2.com funcWebWiki-rx-kernel.com
	cd kernel
	zip --quiet -r "../$KERNEL_FN" .
	zip --quiet -r ../funcWebWiki-rx-kernel.com .
	cd ..
	zip --quiet -r "$KERNEL_FN" thirdparty/licenses thirdparty/redbean-3.0.0-licenses.txt COPYING
	zip --quiet -r funcWebWiki-rx-kernel.com thirdparty/licenses thirdparty/redbean-3.0.0-licenses.txt COPYING
	chmod +x "$KERNEL_FN" funcWebWiki-rx-kernel.com
}

wiki_clean() {
	set -e
	rm -rf wiki/chaff
	rm -rf wiki/system/cache unpack-dir static-dir static.tar
	fused_clean
}

wiki_build() {
	set -e
	wiki_clean
	# build wiki
	$REDBEAN -D kernel -- --trigger updateSystemHashes --trigger "buildCaches?flush=1" --trigger errorSweep
	# build static
	$REDBEAN -D kernel -- --trigger genSiteTar > static.tar
	# create embedded wiki coms
	cp funcWebWiki-rx-kernel.com funcWebWiki-rx.com
	zip --quiet -r funcWebWiki-rx.com wiki
	# extract static
	rm -rf static-dir
	mkdir -p static-dir
	cd static-dir
	tar -xf ../static.tar
	cd ..
}

clean() {
	set -e
	kernel_clean
	wiki_clean
}

build() {
	set -e
	kernel_build
	wiki_build
	zip --quiet -r release.zip "$KERNEL_FN" COPYING INSTALL_GUIDE.md thirdparty/licenses thirdparty/redbean-3.0.0-licenses.txt wiki
}

if [ "$CMD" = "help" ]; then
	echo "-- funcWebWiki developer build system --"
	echo "REDBEAN = $REDBEAN"
	echo "commands:"
	echo " help: shows this text"
	echo " clean: cleans all build outputs"
	echo " build: builds the wiki ; creates funcWebWiki-kernel.com, funcWebWiki.com,"
	echo "  funcWebWiki-rx-kernel.com, funcWebWiki-rx.com"
	echo "  of these, funcWebWiki-kernel.com and funcWebWiki.com should be safe to release"
	echo " run, run-prefix, run-ro, run-rx, run-unsandboxed: run, run in site prefix mode,"
	echo "  run in read-only mode, run in self-modifying mode, run in unsandboxed mode"
	echo " run-chaff-perf: Run with 'chaff' pages in performance logging mode."
	echo " test: runs the tests, including on 'anchor'"
	echo " make-anchor-wiki-tar: uses git archive to extract the 'anchor' tag"
elif [ "$CMD" = "clean" ]; then
	clean
elif [ "$CMD" = "build" ]; then
	build
elif [ "$CMD" = "run" ]; then
	build
	export WIKI_TWM_PASSWORD=test
	ape "./$KERNEL_FN"
elif [ "$CMD" = "run-prefix" ]; then
	build
	ape "./$KERNEL_FN" -- --url-base /test/ --strip-prefix /test/
elif [ "$CMD" = "run-ro" ]; then
	build
	ape ./funcWebWiki-rx.com -- --asset-wiki
elif [ "$CMD" = "run-rx" ]; then
	build
	cp funcWebWiki-rx.com funcWebWiki-scratch.com
	ape ./funcWebWiki-scratch.com -* -- --asset-wiki
elif [ "$CMD" = "run-unsandboxed" ]; then
	build
	ape "./$KERNEL_FN" -- --unsandboxed-unsafe
elif [ "$CMD" = "run-chaff-perf" ]; then
	build
	lua gen_chaff.lua
	ape "./$KERNEL_FN" -- --trigger buildCaches --continue --performance-log
elif [ "$CMD" = "test" ]; then
	build
	ape "./$KERNEL_FN" -F tests.lua --
	rm -rf anchor-dir
	mkdir anchor-dir
	cd anchor-dir
	tar -xf ../anchor.tar
	ape "../$KERNEL_FN" -F tests.lua --
elif [ "$CMD" = "make-anchor-wiki-tar" ]; then
	git archive anchor wiki tests.lua -o anchor.tar
else
	echo "unknown command (try help)"
fi
